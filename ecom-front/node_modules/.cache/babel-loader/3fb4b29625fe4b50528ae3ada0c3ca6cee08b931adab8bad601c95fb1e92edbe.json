{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Create an async thunk for fetching cart information\nexport const fetchCartInfo = createAsyncThunk('cart/fetchCartInfo', async (userId, {\n  rejectWithValue\n}) => {\n  try {\n    // Assuming you have an API endpoint for fetching cart info by user ID\n    const response = await axios.get(`http://localhost:5001/api/cart/carts/${userId}`);\n    console.log(response.data);\n    return response.data;\n  } catch (error) {\n    // Handle errors and provide a rejection value\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  cartInfo: localStorage.getItem('cartInfo') ? JSON.parse(localStorage.getItem('cartInfo')) : {\n    id: null,\n    products: []\n  } // Initialize products as an array\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    setcartInfo: (state, action) => {\n      // Assuming action.payload is an array of products\n      state.cartInfo.id = action.payload;\n      state.cartInfo.products = action.payload;\n      localStorage.setItem('cartInfo', JSON.stringify(state.cartInfo));\n    }\n  },\n  extraReducers: builder => {\n    // Add extra reducers for handling fetchCartInfo async action\n    builder.addCase(fetchCartInfo.fulfilled, (state, action) => {\n      // Update the cartInfo state when fetching is successful\n      state.cartInfo.id = action.payload;\n      state.cartInfo.products = action.payload;\n      localStorage.setItem('cartInfo', JSON.stringify(state.cartInfo));\n    }).addCase(fetchCartInfo.rejected, (state, action) => {\n      // Handle any actions when fetching is rejected (optional)\n    });\n  }\n});\nexport const {\n  setcartInfo\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchCartInfo","userId","rejectWithValue","response","get","console","log","data","error","message","initialState","cartInfo","localStorage","getItem","JSON","parse","id","products","cartSlice","name","reducers","setcartInfo","state","action","payload","setItem","stringify","extraReducers","builder","addCase","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/anfam/OneDrive - Institute of Business Administration/IBA 5th Semester/DB/PROJECT/new frontend/ecom-front/src/store/slices/cartSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Create an async thunk for fetching cart information\r\nexport const fetchCartInfo = createAsyncThunk('cart/fetchCartInfo', async (userId, { rejectWithValue }) => {\r\n  try {\r\n    // Assuming you have an API endpoint for fetching cart info by user ID\r\n    const response = await axios.get(`http://localhost:5001/api/cart/carts/${userId}`);\r\n    console.log(response.data)\r\n    return response.data;\r\n    \r\n    \r\n    \r\n  } catch (error) {\r\n    // Handle errors and provide a rejection value\r\n    return rejectWithValue(error.message);\r\n  }\r\n});\r\n\r\nconst initialState = {\r\n  cartInfo: localStorage.getItem('cartInfo')\r\n    ? JSON.parse(localStorage.getItem('cartInfo'))\r\n    : { id: null, products: [] }, // Initialize products as an array\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    setcartInfo: (state, action) => {\r\n      // Assuming action.payload is an array of products\r\n      state.cartInfo.id = action.payload;\r\n      state.cartInfo.products = action.payload;\r\n      localStorage.setItem('cartInfo', JSON.stringify(state.cartInfo));\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Add extra reducers for handling fetchCartInfo async action\r\n    builder\r\n      .addCase(fetchCartInfo.fulfilled, (state, action) => {\r\n        // Update the cartInfo state when fetching is successful\r\n        state.cartInfo.id =action.payload;\r\n        state.cartInfo.products = action.payload;\r\n        localStorage.setItem('cartInfo', JSON.stringify(state.cartInfo));\r\n      })\r\n      .addCase(fetchCartInfo.rejected, (state, action) => {\r\n        // Handle any actions when fetching is rejected (optional)\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setcartInfo } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAAC,oBAAoB,EAAE,OAAOG,MAAM,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACzG,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,wCAAuCH,MAAO,EAAC,CAAC;IAClFI,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC;IAC1B,OAAOJ,QAAQ,CAACI,IAAI;EAItB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAON,eAAe,CAACM,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAEC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GACtCC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAC5C;IAAEG,EAAE,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAE;AAClC,CAAC;AAED,MAAMC,SAAS,GAAGrB,WAAW,CAAC;EAC5BsB,IAAI,EAAE,MAAM;EACZT,YAAY;EACZU,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9B;MACAD,KAAK,CAACX,QAAQ,CAACK,EAAE,GAAGO,MAAM,CAACC,OAAO;MAClCF,KAAK,CAACX,QAAQ,CAACM,QAAQ,GAAGM,MAAM,CAACC,OAAO;MACxCZ,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEX,IAAI,CAACY,SAAS,CAACJ,KAAK,CAACX,QAAQ,CAAC,CAAC;IAClE;EACF,CAAC;EACDgB,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CACJC,OAAO,CAAC7B,aAAa,CAAC8B,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACnD;MACAD,KAAK,CAACX,QAAQ,CAACK,EAAE,GAAEO,MAAM,CAACC,OAAO;MACjCF,KAAK,CAACX,QAAQ,CAACM,QAAQ,GAAGM,MAAM,CAACC,OAAO;MACxCZ,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEX,IAAI,CAACY,SAAS,CAACJ,KAAK,CAACX,QAAQ,CAAC,CAAC;IAClE,CAAC,CAAC,CACDkB,OAAO,CAAC7B,aAAa,CAAC+B,QAAQ,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAClD;IAAA,CACD,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEF;AAAY,CAAC,GAAGH,SAAS,CAACc,OAAO;AAEhD,eAAed,SAAS,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}